import { Injectable, CanActivate, ExecutionContext, UnauthorizedException, BadRequestException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { User, UserDocument } from '../schemas/user.schema';

@Injectable()
export class TelegramAuthGuard implements CanActivate {
  constructor(
    @InjectModel(User.name) private readonly userModel: Model<UserDocument>,
  ) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest();
    const userId = request.query?.userId || request.body?.userId || request.params?.userId;

    // üîí –ë–ê–ó–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
    if (!userId) {
      throw new BadRequestException('userId is required');
    }

    if (typeof userId !== 'string' || userId.length < 5 || userId.length > 20) {
      throw new BadRequestException('Invalid userId format');
    }

    // üîí –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    const user = await this.userModel.findOne({ userId: String(userId) }).lean();
    if (!user) {
      throw new UnauthorizedException('User not found');
    }

    // üîí –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const ip = request.ip || request.connection?.remoteAddress || 'unknown';
    const userAgent = request.headers?.['user-agent'] || 'unknown';
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ Redis/–ª–æ–≥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if (process.env.NODE_ENV === 'development') {
      console.log(`[AUTH] userId=${userId}, ip=${ip}, ua=${userAgent.substring(0, 50)}`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º user –≤ request –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö
    request.user = user;
    return true;
  }
}
