#!/usr/bin/env ts-node

/**
 * –°–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–º–µ—Å—Ç–æ –º–æ–∫–æ–≤
 * 
 * –°–æ–∑–¥–∞—ë—Ç –º–æ–¥—É–ª—å a0.travel + 8 —É—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
 */

import mongoose from 'mongoose';
import * as dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã
import { CourseModule, CourseModuleSchema } from '../src/modules/common/schemas/course-module.schema';
import { Lesson, LessonSchema } from '../src/modules/common/schemas/lesson.schema';

(async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/burlive', {
        dbName: 'burlang-db',
    });
    console.log('üîó –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ MongoDB');
    
    const ModuleModel = mongoose.model(CourseModule.name, CourseModuleSchema);
    const LessonModel = mongoose.model(Lesson.name, LessonSchema);

    const moduleRef = 'a0.travel';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–¥—É–ª—å
    const exists = await ModuleModel.findOne({ moduleRef });
    if (!exists) {
      console.log('üì¶ –°–æ–∑–¥–∞—ë–º –º–æ–¥—É–ª—å a0.travel...');
      await ModuleModel.create({
        moduleRef,
        level: 'A0',
        title: { ru: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (–Ω–∞—á–∞–ª—å–Ω—ã–π)', en: 'Travel (Beginner)' },
        description: { ru: '–û—Å–Ω–æ–≤—ã –æ–±—â–µ–Ω–∏—è –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç—É', en: 'Airport basics' },
        tags: ['travel','airport','beginner'],
        order: 1,
        published: true,
        requiresPro: false,
        isAvailable: true,
      });
      console.log('   ‚úÖ –ú–æ–¥—É–ª—å —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('   ‚ÑπÔ∏è –ú–æ–¥—É–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –°–æ–∑–¥–∞—ë–º —É—Ä–æ–∫–∏
    const lessons = [
      ['a0.travel.001','–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ'],
      ['a0.travel.002','–î–æ—Å–º–æ—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'],
      ['a0.travel.003','–ü–æ—Å–∞–¥–∫–∞ –Ω–∞ —Å–∞–º–æ–ª—ë—Ç'],
      ['a0.travel.004','–í–æ –≤—Ä–µ–º—è –ø–æ–ª—ë—Ç–∞'],
      ['a0.travel.005','–ü—Ä–∏–±—ã—Ç–∏–µ –∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å'],
      ['a0.travel.006','–ó–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª—å'],
      ['a0.travel.007','–í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ'],
      ['a0.travel.008','–°–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Ä–æ–≥—É'],
    ];
    
    console.log('üìö –°–æ–∑–¥–∞—ë–º —É—Ä–æ–∫–∏...');
    for (let i = 0; i < lessons.length; i++) {
      const [lessonRef, title] = lessons[i];
      const ex = await LessonModel.findOne({ lessonRef });
      if (!ex) {
        await LessonModel.create({
          moduleRef,
          lessonRef,
          title: { ru: title, en: '...' },
          description: { ru: '...', en: '...' },
          estimatedMinutes: 8,
          order: i + 1,
          type: 'vocabulary',
          difficulty: 'easy',
          tags: ['basics'],
          xpReward: 25,
          hasAudio: true,
          hasVideo: false,
          tasks: [], // –ø–æ–∑–∂–µ –ø–æ–¥–ª–æ–∂–∏—à—å —Ä–µ–∞–ª—å–Ω—ã–µ
          published: true,
        });
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω —É—Ä–æ–∫ ${lessonRef}`);
      } else {
        console.log(`   ‚ÑπÔ∏è –£—Ä–æ–∫ ${lessonRef} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }
    
    console.log('üéâ –°–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    process.exit(0);
  }
})();
