#!/usr/bin/env ts-node

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è userId —Å Number –Ω–∞ String
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π MongoDB,
 * –ø—Ä–µ–æ–±—Ä–∞–∑—É—è userId –∏–∑ Number –≤ String –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ–ª—å—à–∏—Ö ID (> 2^53)
 */

import { MongoClient } from 'mongodb';
import * as dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/burlive';
const DRY_RUN = process.env.DRY_RUN === 'true';

interface MigrationStats {
  users: number;
  userLessonProgress: number;
  userTaskAttempts: number;
  learningSessions: number;
  dailyStats: number;
  xpTransactions: number;
  events: number;
  achievements: number;
  leads: number;
  promoRedemptions: number;
  entitlements: number;
  payments: number;
}

async function migrateUserIdToString() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    await client.connect();
    const db = client.db('burlang-db');
    
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é userId: Number ‚Üí String${DRY_RUN ? ' (DRY RUN)' : ''}`);
    
    const stats: MigrationStats = {
      users: 0,
      userLessonProgress: 0,
      userTaskAttempts: 0,
      learningSessions: 0,
      dailyStats: 0,
      xpTransactions: 0,
      events: 0,
      achievements: 0,
      leads: 0,
      promoRedemptions: 0,
      entitlements: 0,
      payments: 0,
    };

    // –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    const collections = [
      'users',
      'user_lesson_progress', 
      'user_task_attempts',
      'learning_sessions',
      'daily_stats',
      'xp_transactions',
      'events',
      'achievements',
      'leads',
      'promo_redemptions',
      'entitlements',
      'payments'
    ];

    for (const collectionName of collections) {
      console.log(`\nüìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: ${collectionName}`);
      
      const collection = db.collection(collectionName);
      
      // –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å userId —Ç–∏–ø–∞ int
      const documentsToUpdate = await collection.find({ 
        userId: { $type: "int" } 
      }).toArray();
      
      console.log(`   –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${documentsToUpdate.length}`);
      
      if (documentsToUpdate.length === 0) {
        continue;
      }
      
      if (!DRY_RUN) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è userId –≤ —Å—Ç—Ä–æ–∫—É
        const result = await collection.updateMany(
          { userId: { $type: "int" } },
          [{ $set: { userId: { $toString: "$userId" } } }]
        );
        
        console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${result.modifiedCount}`);
        stats[collectionName as keyof MigrationStats] = result.modifiedCount;
      } else {
        console.log(`   üîç DRY RUN: –±—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${documentsToUpdate.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
        stats[collectionName as keyof MigrationStats] = documentsToUpdate.length;
      }
    }

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('\nüîß –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...');
    
    if (!DRY_RUN) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
      const indexOperations: Array<{
        collection: string;
        drop: string;
        create: Record<string, 1 | -1>;
        options: any;
      }> = [
        // users
        { collection: 'users', drop: 'userId_1', create: { userId: 1 }, options: { unique: true } },
        
        // user_lesson_progress
        { collection: 'user_lesson_progress', drop: 'userId_1_lessonRef_1', create: { userId: 1, lessonRef: 1 }, options: { unique: true } },
        { collection: 'user_lesson_progress', drop: 'userId_1_status_1', create: { userId: 1, status: 1 }, options: {} },
        { collection: 'user_lesson_progress', drop: 'userId_1_moduleRef_1_status_1', create: { userId: 1, moduleRef: 1, status: 1 }, options: {} },
        
        // user_task_attempts
        { collection: 'user_task_attempts', drop: 'userId_1_taskRef_1_clientAttemptId_1', create: { userId: 1, taskRef: 1, clientAttemptId: 1 }, options: { unique: true } },
        { collection: 'user_task_attempts', drop: 'userId_1_lessonRef_1_taskRef_1_attemptNo_1', create: { userId: 1, lessonRef: 1, taskRef: 1, attemptNo: 1 }, options: { unique: true } },
        
        // learning_sessions
        { collection: 'learning_sessions', drop: 'userId_1_startedAt_-1', create: { userId: 1, startedAt: -1 }, options: {} },
        
        // daily_stats
        { collection: 'daily_stats', drop: 'userId_1_dayKey_1', create: { userId: 1, dayKey: 1 }, options: { unique: true } },
        
        // xp_transactions
        { collection: 'xp_transactions', drop: 'userId_1_createdAt_-1', create: { userId: 1, createdAt: -1 }, options: {} },
        
        // achievements
        { collection: 'achievements', drop: 'userId_1_key_1', create: { userId: 1, key: 1 }, options: { unique: true } },
        
        // leads
        { collection: 'leads', drop: 'userId_1', create: { userId: 1 }, options: { unique: true } },
        
        // promo_redemptions
        { collection: 'promo_redemptions', drop: 'promoId_1_userId_1', create: { promoId: 1, userId: 1 }, options: { unique: true } },
        
        // entitlements
        { collection: 'entitlements', drop: 'userId_1_product_1', create: { userId: 1, product: 1 }, options: { unique: true } },
        { collection: 'entitlements', drop: 'endsAt_1', create: { endsAt: 1 }, options: {} },
      ];

      for (const op of indexOperations) {
        try {
          const collection = db.collection(op.collection);
          
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å
          try {
            await collection.dropIndex(op.drop);
            console.log(`   üóëÔ∏è  –£–¥–∞–ª–µ–Ω –∏–Ω–¥–µ–∫—Å: ${op.collection}.${op.drop}`);
          } catch (e) {
            // –ò–Ω–¥–µ–∫—Å –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
          }
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
          await collection.createIndex(op.create, op.options);
          console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: ${op.collection}.${Object.keys(op.create).join('_')}`);
        } catch (error) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${op.collection}:`, error);
        }
      }
    } else {
      console.log('   üîç DRY RUN: –∏–Ω–¥–µ–∫—Å—ã –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é—Ç—Å—è');
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log('=====================================');
    Object.entries(stats).forEach(([collection, count]) => {
      console.log(`${collection.padEnd(20)}: ${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
    });
    
    const totalUpdated = Object.values(stats).reduce((sum, count) => sum + count, 0);
    console.log('=====================================');
    console.log(`–í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${totalUpdated} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
    
    if (DRY_RUN) {
      console.log('\n‚ö†Ô∏è  –≠—Ç–æ –±—ã–ª DRY RUN. –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
      console.log('   DRY_RUN=false npm run migrate:userid');
    } else {
      console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è userId: Number ‚Üí String –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await client.close();
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  migrateUserIdToString()
    .then(() => {
      console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { migrateUserIdToString };
