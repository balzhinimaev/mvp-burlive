#!/usr/bin/env ts-node

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º MongoDB –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
 */

import { MongoClient } from 'mongodb';
import * as dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/burlive';
const DRY_RUN = process.env.DRY_RUN === 'true';

async function migrateSchemas() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    await client.connect();
    console.log('üîó –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ MongoDB');
    
    const db = client.db("burlang-db");
    
    console.log('\nüìã –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º...');
    
    // 1) Entitlements - –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º 'yearly' –≤ —Å—Ö–µ–º–µ
    console.log('\n1Ô∏è‚É£ Entitlements - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã...');
    const entitlements = await db.collection('entitlements').find({}).toArray();
    const products = [...new Set(entitlements.map(e => e.product))];
    console.log(`   –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç—ã: ${products.join(', ')}`);
    console.log('   ‚úÖ –°—Ö–µ–º–∞ —É–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç yearly');
    
    // 2) Lessons - –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç—ã
    console.log('\n2Ô∏è‚É£ Lessons - –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç—ã...');
    const lessonsResult = await db.collection('lessons').updateMany(
      {},
      {
        $setOnInsert: { estimatedMinutes: 8 },
        $set: {
          xpReward: 25,
          hasAudio: true,
          hasVideo: false
        }
      }
    );
    console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: ${lessonsResult.modifiedCount}`);
    
    // 3) Course modules - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
    console.log('\n3Ô∏è‚É£ Course modules - –¥–æ–±–∞–≤–ª—è–µ–º requiresPro –∏ isAvailable...');
    const modulesResult = await db.collection('course_modules').updateMany(
      {},
      {
        $set: { 
          requiresPro: false, 
          isAvailable: true 
        }
      }
    );
    console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥—É–ª–µ–π: ${modulesResult.modifiedCount}`);
    
    // 4) User lesson progress - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
    console.log('\n4Ô∏è‚É£ User lesson progress - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è...');
    const progressResult = await db.collection('user_lesson_progress').updateMany(
      { score: { $exists: false } },
      { 
        $set: { 
          score: 0, 
          attempts: 0, 
          timeSpent: 0 
        } 
      }
    );
    console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${progressResult.modifiedCount}`);
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    await client.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
if (require.main === module) {
  migrateSchemas()
    .then(() => {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
      process.exit(1);
    });
}

export { migrateSchemas };
