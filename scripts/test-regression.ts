#!/usr/bin/env ts-node

/**
 * –¢–µ—Å—Ç-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. userId –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 * 2. –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–æ–∫
 * 3. –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π moduleRef
 * 4. –ë–æ–ª—å—à–∏–µ userId (> 2^53)
 */

import { MongoClient } from 'mongodb';
import axios from 'axios';
import * as dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/burlive';
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

interface TestResult {
  name: string;
  passed: boolean;
  error?: string;
  details?: any;
}

async function runRegressionTests(): Promise<TestResult[]> {
  const results: TestResult[] = [];
  const client = new MongoClient(MONGODB_URI);
  
  try {
    await client.connect();
    const db = client.db('burlang-db');
    
    console.log('üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Ä–µ–≥—Ä–µ—Å—Å–∞...\n');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ userId –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    results.push(await testUserIdAsString(db));
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–ª—å—à–∏—Ö userId
    results.push(await testLargeUserId(db));
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    results.push(await testIdempotency(db));
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ moduleRef
    results.push(await testModuleRefDenormalization(db));
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
    results.push(await testApiEndpoints());
    
  } catch (error) {
    results.push({
      name: '–û–±—â–∞—è –æ—à–∏–±–∫–∞',
      passed: false,
      error: error instanceof Error ? error.message : String(error)
    });
  } finally {
    await client.close();
  }
  
  return results;
}

async function testUserIdAsString(db: any): Promise<TestResult> {
  try {
    console.log('üîç –¢–µ—Å—Ç 1: userId –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ userId –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –∏–º–µ—é—Ç —Ç–∏–ø string
    const collections = [
      'users', 'user_lesson_progress', 'user_task_attempts', 
      'learning_sessions', 'daily_stats', 'xp_transactions'
    ];
    
    const issues: string[] = [];
    
    for (const collectionName of collections) {
      const collection = db.collection(collectionName);
      const count = await collection.countDocuments({ userId: { $type: "int" } });
      
      if (count > 0) {
        issues.push(`${collectionName}: ${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å userId —Ç–∏–ø–∞ int`);
      }
    }
    
    if (issues.length > 0) {
      return {
        name: 'userId –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞',
        passed: false,
        error: `–ù–∞–π–¥–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å userId —Ç–∏–ø–∞ int: ${issues.join(', ')}`
      };
    }
    
    console.log('   ‚úÖ –í—Å–µ userId –∏–º–µ—é—Ç —Ç–∏–ø string');
    return { name: 'userId –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞', passed: true };
    
  } catch (error) {
    return {
      name: 'userId –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞',
      passed: false,
      error: error instanceof Error ? error.message : String(error)
    };
  }
}

async function testLargeUserId(db: any): Promise<TestResult> {
  try {
    console.log('üîç –¢–µ—Å—Ç 2: –ë–æ–ª—å—à–∏–µ userId (> 2^53)');
    
    const largeUserId = '9007199254740993'; // > 2^53
    const usersCollection = db.collection('users');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–ª—å—à–∏–º ID
    await usersCollection.updateOne(
      { userId: largeUserId },
      { 
        $set: { 
          userId: largeUserId,
          firstName: 'Test',
          lastName: 'LargeId',
          createdAt: new Date()
        }
      },
      { upsert: true }
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª—Å—è –∏ —á–∏—Ç–∞–µ—Ç—Å—è
    const user = await usersCollection.findOne({ userId: largeUserId });
    
    if (!user) {
      return {
        name: '–ë–æ–ª—å—à–∏–µ userId',
        passed: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–ª—å—à–∏–º userId'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userId —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    if (typeof user.userId !== 'string') {
      return {
        name: '–ë–æ–ª—å—à–∏–µ userId',
        passed: false,
        error: `userId –∏–º–µ–µ—Ç —Ç–∏–ø ${typeof user.userId}, –æ–∂–∏–¥–∞–ª—Å—è string`
      };
    }
    
    console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –±–æ–ª—å—à–∏–º userId —Å–æ–∑–¥–∞–Ω: ${user.userId}`);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await usersCollection.deleteOne({ userId: largeUserId });
    
    return { name: '–ë–æ–ª—å—à–∏–µ userId', passed: true };
    
  } catch (error) {
    return {
      name: '–ë–æ–ª—å—à–∏–µ userId',
      passed: false,
      error: error instanceof Error ? error.message : String(error)
    };
  }
}

async function testIdempotency(db: any): Promise<TestResult> {
  try {
    console.log('üîç –¢–µ—Å—Ç 3: –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–æ–∫');
    
    const attemptsCollection = db.collection('user_task_attempts');
    const testUserId = '123456789';
    const testTaskRef = 'test.task.001';
    const testClientAttemptId = 'test-idempotency-' + Date.now();
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ø—ã—Ç–∫—É
    const attempt1 = await attemptsCollection.insertOne({
      userId: testUserId,
      lessonRef: 'test.lesson.001',
      taskRef: testTaskRef,
      attemptNo: 1,
      correct: true,
      clientAttemptId: testClientAttemptId,
      createdAt: new Date()
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
    try {
      await attemptsCollection.insertOne({
        userId: testUserId,
        lessonRef: 'test.lesson.001',
        taskRef: testTaskRef,
        attemptNo: 2,
        correct: false,
        clientAttemptId: testClientAttemptId,
        createdAt: new Date()
      });
      
      return {
        name: '–ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–æ–∫',
        passed: false,
        error: '–î—É–±–ª–∏—Ä—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ (–Ω–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)'
      };
    } catch (error: any) {
      if (error.code === 11000) {
        console.log('   ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ (E11000)');
      } else {
        throw error;
      }
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await attemptsCollection.deleteOne({ _id: attempt1.insertedId });
    
    return { name: '–ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–æ–∫', passed: true };
    
  } catch (error) {
    return {
      name: '–ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–æ–∫',
      passed: false,
      error: error instanceof Error ? error.message : String(error)
    };
  }
}

async function testModuleRefDenormalization(db: any): Promise<TestResult> {
  try {
    console.log('üîç –¢–µ—Å—Ç 4: –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π moduleRef');
    
    const progressCollection = db.collection('user_lesson_progress');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å moduleRef
    const withModuleRef = await progressCollection.countDocuments({ 
      moduleRef: { $exists: true } 
    });
    
    const withoutModuleRef = await progressCollection.countDocuments({ 
      moduleRef: { $exists: false } 
    });
    
    console.log(`   üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å moduleRef: ${withModuleRef}`);
    console.log(`   üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ moduleRef: ${withoutModuleRef}`);
    
    if (withoutModuleRef > 0) {
      return {
        name: '–î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π moduleRef',
        passed: false,
        error: `${withoutModuleRef} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –∏–º–µ—é—Ç moduleRef`
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å moduleRef
    const sampleDoc = await progressCollection.findOne({ 
      moduleRef: { $exists: true } 
    });
    
    if (sampleDoc) {
      const expectedModuleRef = sampleDoc.lessonRef.split('.').slice(0, 2).join('.');
      if (sampleDoc.moduleRef !== expectedModuleRef) {
        return {
          name: '–î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π moduleRef',
          passed: false,
          error: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π moduleRef: ${sampleDoc.moduleRef}, –æ–∂–∏–¥–∞–ª—Å—è: ${expectedModuleRef}`
        };
      }
    }
    
    console.log('   ‚úÖ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π moduleRef');
    return { name: '–î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π moduleRef', passed: true };
    
  } catch (error) {
    return {
      name: '–î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π moduleRef',
      passed: false,
      error: error instanceof Error ? error.message : String(error)
    };
  }
}

async function testApiEndpoints(): Promise<TestResult> {
  try {
    console.log('üîç –¢–µ—Å—Ç 5: API endpoints');
    
    const testUserId = '123456789';
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
    const endpoints = [
      `/profile/${testUserId}`,
      `/content/modules?userId=${testUserId}`,
      `/progress/stats/daily/${testUserId}`,
      `/progress/xp/${testUserId}`,
      `/progress/lessons/${testUserId}`,
    ];
    
    const issues: string[] = [];
    
    for (const endpoint of endpoints) {
      try {
        const response = await axios.get(`${API_BASE_URL}${endpoint}`, {
          timeout: 5000,
          validateStatus: () => true // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥—ã
        });
        
        if (response.status >= 500) {
          issues.push(`${endpoint}: HTTP ${response.status}`);
        }
      } catch (error) {
        issues.push(`${endpoint}: ${error instanceof Error ? error.message : String(error)}`);
      }
    }
    
    if (issues.length > 0) {
      return {
        name: 'API endpoints',
        passed: false,
        error: `–ü—Ä–æ–±–ª–µ–º—ã —Å endpoints: ${issues.join(', ')}`
      };
    }
    
    console.log('   ‚úÖ –í—Å–µ API endpoints –æ—Ç–≤–µ—á–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return { name: 'API endpoints', passed: true };
    
  } catch (error) {
    return {
      name: 'API endpoints',
      passed: false,
      error: error instanceof Error ? error.message : String(error)
    };
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runRegressionTests()
    .then((results) => {
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Ä–µ–≥—Ä–µ—Å—Å–∞:');
      console.log('=====================================');
      
      let passedCount = 0;
      let failedCount = 0;
      
      results.forEach((result) => {
        const status = result.passed ? '‚úÖ PASS' : '‚ùå FAIL';
        console.log(`${status} ${result.name}`);
        
        if (!result.passed && result.error) {
          console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
        }
        
        if (result.passed) {
          passedCount++;
        } else {
          failedCount++;
        }
      });
      
      console.log('=====================================');
      console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.length}`);
      console.log(`–ü—Ä–æ—à–ª–æ: ${passedCount}`);
      console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedCount}`);
      
      if (failedCount === 0) {
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
      } else {
        console.log('\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!');
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
      process.exit(1);
    });
}

export { runRegressionTests };
