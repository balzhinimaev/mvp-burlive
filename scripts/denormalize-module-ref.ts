#!/usr/bin/env ts-node

/**
 * –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è moduleRef –≤ user_lesson_progress
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ moduleRef –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é user_lesson_progress
 * –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –º–æ–¥—É–ª—è–º
 */

import { MongoClient } from 'mongodb';
import * as dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/burlive';
const DRY_RUN = process.env.DRY_RUN === 'true';

async function denormalizeModuleRef() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    await client.connect();
    const db = client.db('burlang-db');
    
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é moduleRef${DRY_RUN ? ' (DRY RUN)' : ''}`);
    
    const collection = db.collection('user_lesson_progress');
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ moduleRef
    const documentsWithoutModuleRef = await collection.find({ 
      moduleRef: { $exists: false } 
    }).toArray();
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ moduleRef: ${documentsWithoutModuleRef.length}`);
    
    if (documentsWithoutModuleRef.length === 0) {
      console.log('‚úÖ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –∏–º–µ—é—Ç moduleRef');
      return;
    }
    
    if (!DRY_RUN) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, –¥–æ–±–∞–≤–ª—è—è moduleRef
      const result = await collection.updateMany(
        { moduleRef: { $exists: false } },
        [{ 
          $set: { 
            moduleRef: { 
              $substrBytes: [
                "$lessonRef", 
                0, 
                { $subtract: [{ $strLenBytes: "$lessonRef" }, 4] }
              ]
            }
          } 
        }]
      );
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${result.modifiedCount}`);
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ moduleRef
      await collection.createIndex(
        { userId: 1, moduleRef: 1, status: 1 },
        { name: 'userId_1_moduleRef_1_status_1' }
      );
      
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: userId_1_moduleRef_1_status_1');
      
    } else {
      console.log(`üîç DRY RUN: –±—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${documentsWithoutModuleRef.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
      console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:');
      documentsWithoutModuleRef.slice(0, 5).forEach((doc, index) => {
        const lessonRef = doc.lessonRef;
        const moduleRef = lessonRef ? lessonRef.split('.').slice(0, 2).join('.') : 'unknown';
        console.log(`   ${index + 1}. ${lessonRef} ‚Üí moduleRef: ${moduleRef}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const remainingWithoutModuleRef = await collection.countDocuments({ 
      moduleRef: { $exists: false } 
    });
    
    console.log(`\nüìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ moduleRef –æ—Å—Ç–∞–ª–æ—Å—å: ${remainingWithoutModuleRef}`);
    
    if (DRY_RUN) {
      console.log('\n‚ö†Ô∏è  –≠—Ç–æ –±—ã–ª DRY RUN. –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
      console.log('   DRY_RUN=false npm run migrate:module-ref');
    } else {
      console.log('\n‚úÖ –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è moduleRef –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await client.close();
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
if (require.main === module) {
  denormalizeModuleRef()
    .then(() => {
      console.log('\nüéâ –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { denormalizeModuleRef };
